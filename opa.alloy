opa "default" {
	input = {
		`main.rego` = `package system

import rego.v1

import data.kubernetes.admission

main := {
	"apiVersion": "admission.k8s.io/v1",
	"kind": "AdmissionReview",
	"response": response,
}

default uid := ""

uid := input.request.uid

response := {
	"allowed": false,
	"uid": uid,
	"status": {"message": reason},
} if {
	reason = concat(", ", admission.deny)
	reason != ""
}

else := {"allowed": true, "uid": uid}
`,

		`ingress-allowlist.rego` = `package kubernetes.admission

import rego.v1

import data.kubernetes.namespaces

operations := {"CREATE", "UPDATE"}

deny contains msg if {
	input.request.kind.kind == "Ingress"
	operations[input.request.operation]
	host := input.request.object.spec.rules[_].host
	not fqdn_matches_any(host, valid_ingress_hosts)
	msg := sprintf("invalid ingress host %q", [host])
}

valid_ingress_hosts := {host |
	allowlist := namespaces[input.request.namespace].metadata.annotations["ingress-allowlist"]
	hosts := split(allowlist, ",")
	host := hosts[_]
}

fqdn_matches_any(str, patterns) if {
	fqdn_matches(str, patterns[_])
}

fqdn_matches(str, pattern) if {
	pattern_parts := split(pattern, ".")
	pattern_parts[0] == "*"
	suffix := trim(pattern, "*.")
	endswith(str, suffix)
}

fqdn_matches(str, pattern) if {
	not contains(pattern, "*")
	str == pattern
}

`,

		`ingress-conflicts.rego` = `package kubernetes.admission

import rego.v1

import data.kubernetes.ingresses

deny contains msg if {
	some other_ns, other_ingress
	input.request.kind.kind == "Ingress"
	input.request.operation == "CREATE"
	host := input.request.object.spec.rules[_].host
	ingress := ingresses[other_ns][other_ingress]
	other_ns != input.request.namespace
	ingress.spec.rules[_].host == host
	msg := sprintf("invalid ingress host %q (conflicts with %v/%v)", [host, other_ns, other_ingress])
}
`,
	}
}
